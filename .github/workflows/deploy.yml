name: Deploy Frontend to AWS EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -euo pipefail
          DEPLOY_DIR="/home/ubuntu/aws/eazyvenue-frontend"
          REPO_URL="https://${{ secrets.ACCESS_TOKEN }}@github.com/sonusahu05/AWS_Eazyvenue_frontend.git"

          echo "üöÄ Starting cost-efficient frontend deployment..."

          # Ensure directories and permissions
          mkdir -p /home/ubuntu/aws
          sudo chown -R ubuntu:ubuntu /home/ubuntu/aws || true

          # Clean old backups to save disk space
          find /home/ubuntu/aws -maxdepth 1 -type d -name "*_backup_*" -mtime +7 -exec rm -rf {} \; || true

          # Clone or update repository
          if [ -d "$DEPLOY_DIR/.git" ]; then
            echo "üì• Updating repository..."
            cd "$DEPLOY_DIR"
            git fetch origin main || true
            git reset --hard origin/main || true
          else
            echo "üì• Cloning fresh repository..."
            rm -rf "$DEPLOY_DIR"
            git clone --depth=1 --branch main "$REPO_URL" "$DEPLOY_DIR"
          fi

          cd "$DEPLOY_DIR"

          # Install Node.js 18 if not already installed (but skip if already present)
          if ! node --version 2>/dev/null | grep -q "v18"; then
            echo "üì¶ Installing Node.js 18..."
            curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
            sudo apt-get install -y nodejs
            sudo npm install -g npm@7
          fi

          echo "Node: $(node --version), NPM: $(npm --version)"

          # Install dependencies efficiently
          echo "üì¶ Installing dependencies..."
          npm cache clean --force
          rm -f yarn.lock

          npm ci --legacy-peer-deps --no-audit --no-fund --prefer-offline || {
            echo "‚ö†Ô∏è npm ci failed, trying npm install..."
            rm -rf node_modules 
            npm install --legacy-peer-deps --no-audit --no-fund --prefer-offline
          }

          # Build with optimized memory settings
          echo "üèóÔ∏è Building application..."
          export NODE_OPTIONS="--max-old-space-size=4096 --openssl-legacy-provider"
          npm run build:ssr

          # Install PM2 if missing
          if ! command -v pm2 &>/dev/null; then
            sudo npm install -g pm2
          fi

          # Clean old PM2 processes
          echo "üßπ Cleaning old PM2 processes..."
          pm2 delete eazyvenue-frontend-ssr 2>/dev/null || true

          # Create cost-efficient PM2 config (single instance)
          echo "‚öôÔ∏è Creating PM2 configuration..."
          cat > ecosystem.config.js <<'EOF'
          module.exports = {
            apps: [{
              name: 'eazyvenue-frontend-ssr',
              script: 'dist/freya-ng/server/main.js',
              cwd: '/home/ubuntu/aws/eazyvenue-frontend',
              instances: 1,
              exec_mode: 'fork',
              max_memory_restart: '600M',
              log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
              combine_logs: true,
              error_file: 'logs/frontend-error.log',
              out_file: 'logs/frontend-out.log',
              autorestart: true,
              env: {
                NODE_ENV: 'production',
                PORT: 4000
              }
            }]
          };
          EOF

          # Create logs directory
          mkdir -p logs

          # Verify build exists
          if [ ! -f "dist/freya-ng/server/main.js" ]; then
            echo "‚ùå Error: Server build file not found!"
            find dist -type f -name "*.js" | head -10 || true
            exit 1
          fi

          # Start application
          echo "üöÄ Starting single PM2 instance..."
          pm2 start ecosystem.config.js
          pm2 save
          pm2 startup systemd -u ubuntu --hp /home/ubuntu || true

          # Wait for startup
          echo "‚è≥ Waiting for application to start..."
          sleep 8

          # Verify deployment
          echo "üîç Verifying deployment..."
          pm2 list

          # Test application
          echo "üîç Testing frontend server..."
          if curl -fsS --max-time 10 http://localhost:4000 >/dev/null; then
            echo "‚úÖ Frontend server responding on localhost:4000"
          else
            echo "‚ùå Frontend server not responding, checking logs..."
            pm2 logs eazyvenue-frontend-ssr --lines 20 --nostream || true
            exit 1
          fi

          echo "‚úÖ Cost-efficient frontend deployment completed!"
